#Day 191 Problem-Solving with #GFG POTD and #Leetcode

Today, I solved two interesting problems involving prefix matching and subarray sums. Here's how I approached them:



Problem 1: Counting Words With a Given Prefix

Problem Description:

Given an array of strings words and a string pref, count the number of strings in words that start with pref.



Approach:

1) Iterate Through the Array:

â€¢ For each word in words, check if it starts with pref.



2) Use Built-In Methods:

â€¢ Leverage Pythonâ€™s startswith method for simplicity and efficiency.



3) Count Matches:

â€¢ Increment the count for every word that satisfies the condition.



Complexity:

â€¢ Time: O(nâ‹…m), where n is the number of words and m is the length of pref.

â€¢ Space: O(1).



Problem 2: Indexes of Subarray Sum

Problem Description:

Given an array arr[] of non-negative integers, find the leftmost subarray whose sum equals target. Return the 1-based indices of the leftmost and rightmost elements of the subarray. If no such subarray exists, return [-1].



Approach:

1) Sliding Window Technique:

â€¢ Maintain a window of elements with a running sum.



2) Expand and Contract the Window:



3) Use two pointers, start and end:

â€¢ Increment end to add elements to the sum.

â€¢ Increment start to reduce the sum when it exceeds target.



4) Check for Match:

â€¢ If the sum equals target, return the 1-based indices as [start+1,end+1].



5) Edge Case:

â€¢ If no subarray is found, return [-1].



Complexity:

â€¢ Time: O(n), where nnn is the number of elements in arr.

â€¢ Space: O(1).



Reflection:

1) Counting Words With a Given Prefix:

â€¢ Straightforward implementation using built-in methods made it easy to solve.



2) Indexes of Subarray Sum:

â€¢ The sliding window approach ensured an efficient solution for a potentially large input array.

#PrefixMatching #SlidingWindow #SubarraySum #GFG160 #GeekStreak2024 ðŸš€

