#Day 186 Problem-Solving with #GFG POTD and #Leetcode

Today, I tackled two fascinating problems involving arrays and strings. Here's the breakdown:



Problem 1: Count All Triplets with Given Sum in Sorted Array

Problem Description:

Given a sorted array arr[] and a target value, count the number of triplets (i,j,k) such that:

arr[i]+arr[j]+arr[k]=targetarr[i] + arr[j] + arr[k] 

i<j<k.



Approach:

1) Two-Pointer Technique:

â€¢ For each element arr[i]arr[i]arr[i], use two pointers j and k to find pairs (j,k) such that arr[i]+arr[j]+arr[k]=targetarr[i] + arr[j] + arr[k] .

Initialize j=i+1 and k=nâˆ’1, then adjust pointers based on the sum.



2) Count Triplets:

â€¢ If the sum matches the target, increment the triplet count and adjust both pointers.

â€¢ If the sum is less than the target, increment jjj to increase the sum.

â€¢ If the sum is greater than the target, decrement kkk to reduce the sum.



Complexity:

â€¢ Time: O(n2), iterating over the array with nested two-pointer logic.

â€¢ Space: O(1), no additional space used.



Problem 2: Unique Length-3 Palindromic Subsequences

Problem Description:

Given a string s, count the number of unique palindromes of length 3 that are subsequences of s.



Approach:

1) Track Character Occurrences:

â€¢ Use a hash map or set to record the first and last occurrences of each character in the string.





2) Middle Character Iteration:

â€¢ For each character as a middle character in the palindrome, check if there are unique characters on both sides that form palindromes.

â€¢ Use sets to ensure uniqueness of subsequences.



3) Count Palindromes:

â€¢ For each valid middle character, count the distinct pairs of characters on either side that form palindromes.



Complexity:

â€¢ Time: O(26â‹…n), where 26 is the number of unique lowercase letters.

â€¢ Space: O(26â‹…n), for storing occurrences.



Reflection:

1) Count All Triplets with Given Sum:

â€¢ The two-pointer technique is highly efficient for sorted arrays and avoids the brute-force O(n3) approach.



2) Unique Length-3 Palindromic Subsequences:

â€¢ Leveraging hash maps and sets ensures efficient counting of unique subsequences, reducing unnecessary recomputations.

#TwoPointerTechnique #HashMap #SubsequencePalindromes #EfficientAlgorithms #GFGTriplets #LeetCodeStrings ðŸš€
