#Day 218 Problem-Solving #GFG potd and #leetcode

Problem 1: Inorder Traversal of a Binary Tree

Problem Description:

Given a binary tree, return its inorder traversal sequence.

Inorder Traversal Order:

Left Subtree â†’ Root â†’ Right Subtree

Follow-up: Solve with O(1) auxiliary space (Morris Traversal).



Approaches:

1) Recursive Approach (DFS)

â€¢ Base Case: If the node is NULL, return.

â€¢ Traverse left subtree â†’ Visit root â†’ Traverse right subtree.

â€¢ Time Complexity: O(n)

â€¢ Space Complexity: O(n) (recursion stack).

â€¢ Iterative Approach (Using Stack)

â€¢ Use a stack to simulate recursion.

â€¢ Traverse left, store nodes in stack, then pop and process.



â€¢ Time Complexity: O(n)

â€¢ Space Complexity: O(n) (stack space).

â€¢ Morris Traversal (O(1) Space)

â€¢ Uses threaded binary trees (modifying tree structure).

â€¢ Instead of using stack/recursion, establish temporary links.

â€¢ Time Complexity: O(n)O(n)O(n)

â€¢ Space Complexity: O(1) (modifies tree structure but restores it).



Problem 2: Number of Distinct Colors Among the Balls

Problem Description:

Given an integer limit (representing balls labeled from 0 to limit) and an array of queries of size nÃ—2.

Each query [x, y] assigns color y to ball x.

After each query, return the number of distinct colors among all colored balls.



Approach:

1) Hash Set Approach:

â€¢ Use a dictionary (hashmap) to store ball â†’ color mappings.

â€¢ Maintain a set of distinct colors.

â€¢ After each query, add color y to the set and record the size.

â€¢ Time Complexity: O(n) (each query takes O(1) on average).

â€¢ Space Complexity: O(limit) (for storing ball-color mappings).



Reflection:

1) Inorder Traversal:

â€¢ Practiced three different traversal methods.

â€¢ Explored Morris Traversal for O(1) space solution.



2) Distinct Colors Among Balls:

â€¢ Used hashmap + set for fast updates.

â€¢ Strengthened real-time query handling techniques.

#BinaryTree #TreeTraversal #Hashing #MorrisTraversal #InorderTraversal ðŸš€

