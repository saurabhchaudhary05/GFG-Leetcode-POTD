#Day 161 Problem-Solving with #GFG POTD and #Leetcode

Today's challenges explored the concepts of substring analysis with frequency constraints and interval operations for optimal removal. Here's the breakdown:



Problem 1: Find Longest Special Substring That Occurs Thrice 

Problem Description

A string is special if it consists of only one repeated character (e.g., "ddd" or "zzz"). The task is to find the length of the longest special substring that appears at least three times in the given string s. If no such substring exists, return -1.



Example:

Input:

s = "aaabbbaaaabbbaaa"

Output:

3



Explanation:

Special substrings: "aaa", "bbb", "aa", "bb", "a", "b".

Longest special substring occurring at least thrice is "aaa".



Approach:

1) Sliding Window for Substrings:

• Generate all substrings with a sliding window of varying lengths.



2) Frequency Check:

• Use a frequency map (e.g., a dictionary) to count occurrences of each substring.



3) Filter Special Substrings:

• Check if the substring is special (contains only one unique character).

• Keep track of the longest substring meeting the condition.



4) Return Results:

• If no special substring occurs thrice, return -1.

• Otherwise, return the length of the longest valid substring.



Complexity:

• Time: O(n^2) for generating substrings and frequency checks.

• Space: O(n^2) for storing substrings in the map.



Key Takeaway:

• Efficient substring generation and counting are essential for solving frequency-based substring problems.



Problem 2: Non-Overlapping Intervals

Problem Description

Given an array of intervals, find the minimum number of intervals to remove so that the rest of the intervals are non-overlapping.



Example:

Input:

intervals = [[1, 2], [2, 3], [3, 4], [1, 3]]

Output:

1



Explanation:

Remove [1, 3] to make the rest non-overlapping.



Approach:

1) Sort Intervals by End Time:

• Sort the intervals in ascending order of their ending time to maximize the number of non-overlapping intervals.



2) Greedy Selection:

• Use a variable to track the end time of the last added interval.

• Iterate through the intervals, adding non-overlapping ones to the result and skipping/removing overlapping ones.



3) Count Removals:

• The difference between the total number of intervals and the number of non-overlapping intervals gives the count of removals.



Complexity:

• Time: O(n log n) for sorting and O(n) for iteration.

• Space: O(1) for in-place operations.



Key Takeaway:

• Sorting by end time simplifies the greedy selection of non-overlapping intervals.

#StringManipulation #GreedyAlgorithm #IntervalManagement

#StringMatching #gfg160 #geekstreak2024

﻿
