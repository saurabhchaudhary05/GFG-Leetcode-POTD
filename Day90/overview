#Day 210 Problem-Solving #GFG potd and #leetcode

Problem 1: Implement Pow (b, e)

Problem Description:

Implement the function power(b, e), which calculates beb^ebe (b raised to the power of e).



Approach:

1) Iterative Approach (Brute Force):

‚Ä¢ Multiply b by itself e times.

‚Ä¢ Time Complexity: O(e).



2) Recursive Approach:

‚Ä¢ Use recursion to divide the problem into smaller subproblems.

‚Ä¢ Time Complexity: O(e)(Not optimal for large e).

‚Ä¢ Optimized Approach (Binary Exponentiation - Divide & Conquer):



3) Key Idea:

‚Ä¢ If e is even, be=(be/2)√ó(be/2).

‚Ä¢ If e is odd, be=b√ó(b(e‚àí1)/2)√ó(b(e‚àí1)/2).

This reduces the number of multiplications significantly.



‚Ä¢ Time Complexity: O(log‚Å°e).

‚Ä¢ Space Complexity: O(1) for the iterative version, O(log‚Å°e) for the recursive version.



Problem 2: Redundant Connection

Problem Description:

Given a graph that started as a tree with n nodes labeled from 1 to n, an additional edge was added. The task is to find and remove this extra edge so that the graph remains a tree.



Approach:

1) Union-Find (Disjoint Set Union - DSU):

‚Ä¢ A tree has exactly n-1 edges for n nodes.

‚Ä¢ When adding an edge, if it forms a cycle, that edge is redundant.

‚Ä¢ Use the Union-Find (DSU) with Path Compression to detect cycles efficiently.

‚Ä¢ Traverse through edges[] and try to union them.

‚Ä¢ If a union is not possible (nodes already belong to the same set), that edge is the redundant one.



Steps:

1) Initialize a parent array where parent[i] = i (each node is its own parent initially).

‚Ä¢ For each edge [a, b], check if a and b have the same parent using Find.

‚Ä¢ If yes, return [a, b] as the redundant edge.

‚Ä¢ Otherwise, union them by making one the parent of the other.



Complexity:

‚Ä¢ Time Complexity: O(n) (using path compression in DSU).

‚Ä¢ Space Complexity: O(n).



Reflection:

1) Implement Pow (b, e):

‚Ä¢ Binary exponentiation is significantly faster for large e.

‚Ä¢ Good reinforcement of divide and conquer.



2) Redundant Connection:

‚Ä¢ Strengthened Union-Find (DSU) concept.

‚Ä¢ Reinforced cycle detection in graphs using DSU.

#BinaryExponentiation #DivideAndConquer #UnionFind #CycleDetection #GraphTheory üöÄ



