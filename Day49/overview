#Day 168 Problem-Solving with #GFG POTD and #Leetcode

Today, I solved two problems related to string matching and prefix searching. Here's a breakdown of my approach and solutions:



Problem 1: K-th Element of Two Arrays

Problem Description

Given two sorted arrays a[] and b[] of sizes nnn and mmm, find the element at the kkk-th position of the merged sorted array without fully merging the arrays.



Example:

Input:

a = [2, 3, 6, 7, 9], b = [1, 4, 8, 10], k = 5

Output:

6



Approach:

1) Two Pointer Technique:

• Traverse both arrays simultaneously using two pointers.

• Compare the current elements of the two arrays and move the pointer in the array with the smaller element.

• Stop once k elements have been processed.



2) Binary Search Optimization:

• Treat this problem like a "find median of two sorted arrays" task.

• Use binary search on the smaller array to find the kkk-th element efficiently.

• Partition both arrays such that the kkk-th smallest element is at the boundary.



Complexity:

• Two Pointers: O(k) for small k.

• Binary Search: O(log⁡(min⁡(n,m))).



Edge Cases:

• k≤nk \leq nk≤n or k≤mk \leq mk≤m: Only one array contributes.

• k>n+mk > n + mk>n+m: Invalid input.



Problem 2: Final Array State After K Multiplication Operations

Problem Description

You are given an integer array nums, an integer k, and a multiplier. Perform the following operation kkk times:

Find the minimum value xxx in nums (select the first occurrence in case of a tie).

Return the final state of the array after k operations.



Example:

Input:

nums = [1, 3, 2], k = 2, multiplier = 5

Output:

[5, 3, 2]



Approach:

1) Heap Optimization:

• Use a min-heap to efficiently retrieve the smallest element at each step.

• Extract the smallest value, multiply it, and push the updated value back into the heap.



Steps:

• Convert nums into a heap (heapify).

• Perform k iterations: pop the smallest element, modify it, and push it back.



Complexity:

1) Heap-Based:

• Time: O(klogn), where n is the size of the array.

• Space: O(n) for the heap.

2) Without Heap: O(k⋅n), as finding the minimum element is linear.



Edge Cases:

• k=0: Return nums as is.

• Repeated elements in nums.



Reflection:

• Both problems involve efficient element selection:

• Binary search and two-pointer techniques highlight the power of exploiting sorted properties for kkk-th element searches.

• Heap structures optimize repeated minimum value operations for large datasets.

• These methods balance clarity and computational efficiency, crucial for solving such array-manipulation challenges.



#TwoPointers #BinarySearch #Heap #KMPAlgorithm #StringMatching #gfg160 #geekstreak2024

﻿



