#Day 169: Problem-Solving with #GFG POTD and #LeetCode

Today, I tackled two interesting problems involving binary search and string manipulation. Here's a quick overview of the solutions and approaches:



Problem 1: Aggressive Cows

Problem Description

You are given an array stalls[] representing the positions of stalls. You need to place k cows such that the minimum distance between any two cows is maximized.



Example:

Input:

stalls = [1, 2, 4, 8, 9], k = 3

Output:

3



Approach:

1) Binary Search on Distance:

‚Ä¢ Define a range for the possible minimum distance between cows: from 1 to the difference between the maximum and minimum stall positions.

‚Ä¢ Use binary search to determine the maximum possible minimum distance.



2) Greedy Placement:

‚Ä¢ Check if it's possible to place k cows such that the minimum distance between cows is at least midmidmid.

‚Ä¢ If yes, increase the distance; otherwise, reduce it.



Steps:

‚Ä¢ Sort the stalls[] array.

‚Ä¢ Apply binary search to find the largest minimum distance:

‚Ä¢ Place cows greedily using the mid distance.

‚Ä¢ Verify if all cows can be placed.



Complexity:

‚Ä¢ Time: O(nlog‚Å°d) where d is the range of distances.

‚Ä¢ Space: O(1).



Problem 2: Construct String With Repeat Limit

Problem Description

Given a string s and an integer repeatLimit, construct the lexicographically largest string using the characters of s such that no letter appears more than repeatLimit times consecutively.



Example:

Input:

s = "cczazcc", repeatLimit = 2

Output:

"zzccac"



Approach:

1) Character Frequency Map:

‚Ä¢ Count the occurrences of each character.

‚Ä¢ Greedy Lexicographical Construction:

‚Ä¢ Sort characters in descending order based on their lexicographical order.

‚Ä¢ Append characters to the result string while respecting the repeatLimit.



2) Handling Excess Characters:

‚Ä¢ If a character exceeds the repeatLimit, insert a smaller character in between to break the sequence.



Steps:

‚Ä¢ Create a frequency map for all characters in s.

‚Ä¢ Use a max-heap to maintain characters in descending order.

‚Ä¢ Build the string greedily while adhering to the repeat limit condition.



Complexity:

‚Ä¢ Time: O(nlog26), where n is the length of s.

‚Ä¢ Space: O(26) for the frequency map.



Reflection:

‚Ä¢ Both problems required binary search and greedy techniques for optimization:

‚Ä¢ Aggressive Cows: Demonstrates binary search on answers, a powerful approach for range-based problems.

‚Ä¢ Construct String: Showcases a greedy algorithm leveraging heaps and lexicographical order to satisfy constraints.

‚Ä¢ These methods are key for balancing efficiency and correctness in problem-solving.

#BinarySearch #GreedyAlgorithm #Heap #StringManipulation #GFGPOTD #LeetCodeDaily #geekstreak2024 üöÄ

