#Day 215 Problem-Solving #GFG potd and #leetcode

Problem 1: Diameter of a Binary Tree

Problem Description:

Given a binary tree, find its diameter.

The diameter is the number of edges in the longest path between two leaf nodes (not necessarily passing through the root).



Approach:

1) Recursive DFS (Depth-First Search):

â€¢ Define a helper function to calculate the height of the tree.

â€¢ At each node, compute:

â€¢ Left subtree height

â€¢ Right subtree height

â€¢ Diameter through the node = left height + right height

â€¢ Keep track of the maximum diameter globally.



2) Implementation Details:

â€¢ Use a global variable (maxDiameter) to store the maximum diameter encountered.

â€¢ Perform post-order traversal to compute heights and diameters.

â€¢ The diameter at each node is the sum of the heights of its left and right subtrees.



Complexity Analysis:

â€¢ Time Complexity: O(n)(each node is processed once).

â€¢ Space Complexity: O(h) (recursive depth, where h is the height of the tree).



Problem 2: Maximum Ascending Subarray Sum

Problem Description:

Given an array of positive integers, find the maximum sum of an ascending subarray.

A subarray is ascending if each element is strictly greater than the previous one.



Approach:

1) Sliding Window / Two-Pointer Approach:

â€¢ Traverse the array while maintaining:

â€¢ A running sum of the current ascending subarray.

â€¢ A maximum sum encountered so far.

â€¢ If nums[i] > nums[i-1], extend the subarray.

â€¢ Otherwise, reset the sum to start a new subarray.



2) Implementation Details:

â€¢ Initialize maxSum = 0 and currentSum = nums[0].

â€¢ Iterate from 1 to n-1:

â€¢ If nums[i] > nums[i-1], add to currentSum.

â€¢ Else, update maxSum and reset currentSum.

â€¢ Finally, return max(maxSum, currentSum).



Complexity Analysis:

â€¢ Time Complexity: O(n) (single pass through the array).

â€¢ Space Complexity: O(1) (only a few variables used).



Reflection:

1) Diameter of Binary Tree:

â€¢ Strengthened post-order traversal and tree recursion concepts.

â€¢ Learned height-based tree processing for diameter computation.



2) Maximum Ascending Subarray Sum:

â€¢ Practiced array traversal optimizations.

â€¢ Improved understanding of subarray-based problems.

#BinaryTree #DFS #Recursion #SlidingWindow #ArrayProcessing ðŸš€



