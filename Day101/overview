Problem 1: K Sum Paths üå≥
Problem Description:
Given a binary tree and an integer k, find the number of downward-only paths where the sum of node values in the path equals k.
 A path must always move downward (parent to child) and can start and end at any node.

Approach:
1Ô∏è‚É£ Recursive DFS with Prefix Sum:
 ‚Ä¢ Use a HashMap to store the prefix sum frequencies encountered.
 ‚Ä¢ If current sum - k exists in the map, it means there‚Äôs a valid path.
2Ô∏è‚É£ Steps:
 ‚Ä¢ Traverse the tree using DFS.
 ‚Ä¢ Maintain a prefix sum and store the count of sums encountered.
 ‚Ä¢ Check if (current sum - k) exists in the HashMap.
 ‚Ä¢ Recur for left and right subtrees while updating the prefix sum map.

Complexity:
‚Ä¢ Time Complexity: O(N)
 ‚Ä¢ Space Complexity: O(H) (for recursion stack & HashMap)

Problem 2: Clear Digits üî¢
Problem Description:
Given a string s, remove all digits iteratively using the following rule:
 For each digit, remove it along with the closest non-digit character to its left.
 Return the resulting string after all digits are removed.

Approach:
1Ô∏è‚É£ Stack Simulation:
 ‚Ä¢ Traverse the string while maintaining a stack.
 ‚Ä¢ If a digit is encountered, remove the last non-digit character from the stack.
 ‚Ä¢ Otherwise, push non-digit characters onto the stack.
2Ô∏è‚É£ Steps:
 ‚Ä¢ Initialize an empty stack.
 ‚Ä¢ Iterate over each character:
If digit, pop the last non-digit from the stack.
Else, push the character onto the stack.
 ‚Ä¢ The remaining stack represents the final string.

Complexity:
‚Ä¢ Time Complexity: O(N)
 ‚Ä¢ Space Complexity: O(N)

Reflection:
‚úÖ Prefix Sum Mastery: Improved prefix sum usage with HashMap for tree path sum counting.
 ‚úÖ Stack-Based Removal: Learned efficient in-place string manipulation using stacks.
 ‚úÖ Enhanced Problem-Solving: Strengthened pattern recognition in graph/tree traversal and string processing.
